generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id         BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  firstName  String       @db.VarChar(50)
  lastName   String       @db.VarChar(50)
  email      String       @unique(map: "users_email_unique") @db.VarChar(50)
  mobile     String       @db.VarChar(50)
  password   String       @db.VarChar(50)
  otp        String       @db.VarChar(50)
  created_at DateTime     @default(now()) @db.Timestamp(0)
  updated_at DateTime     @default(now()) @updatedAt @db.Timestamp(0)
  categories categories[]
  customers  customers[]
  invoices   invoices[]
  products   products[]
  invoice_products invoice_products[]
}

model customers {
  id         BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  name       String     @db.VarChar(70)
  email      String     @unique(map: "customer_email_unique") @db.VarChar(50)
  mobile     String     @db.VarChar(50)
  user_id    BigInt     @db.UnsignedBigInt
  users      users      @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade, map: "customers_user_id_foreign")
  created_at DateTime   @default(now()) @db.Timestamp(0)
  updated_at DateTime   @default(now()) @updatedAt @db.Timestamp(0)
  invoices   invoices[]

  @@index([user_id], map: "customers_user_id_foreign")
}

model categories {
  id         BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  name       String     @db.VarChar(50)
  user_id    BigInt     @db.UnsignedBigInt
  users      users      @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade, map: "category_user_id_foreign")
  created_at DateTime   @default(now()) @db.Timestamp(0)
  updated_at DateTime   @default(now()) @updatedAt @db.Timestamp(0)
  products   products[]

  @@index([user_id], map: "category_user_id_foreign")
}

model invoices {
  id               BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  total            String             @db.VarChar(30)
  discount         String             @db.VarChar(30)
  vat              String             @db.VarChar(30)
  payable          String             @db.VarChar(30)
  user_id          BigInt             @db.UnsignedBigInt
  users            users              @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade, map: "invoice_user_id_foreign")
  customer_id      BigInt             @db.UnsignedBigInt
  customers        customers          @relation(fields: [customer_id], references: [id], onDelete: Restrict, onUpdate: Cascade, map: "invoice_customer_id_foreign")
  created_at       DateTime           @default(now()) @db.Timestamp(0)
  updated_at       DateTime           @default(now()) @updatedAt @db.Timestamp(0)
  invoice_products invoice_products[]

  @@index([user_id], map: "invoice_user_id_foreign")
  @@index([customer_id], map: "invoice_customer_id_foreign")
}

model products {
  id               BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  user_id          BigInt            @db.UnsignedBigInt
  users            users             @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade, map: "product_user_id_foreign")
  category_id      BigInt            @db.UnsignedBigInt
  categories       categories        @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Cascade, map: "product_category_id_foreign")
  name             String            @db.VarChar(70)
  price            String            @db.VarChar(70)
  unite            String            @db.VarChar(70)
  created_at       DateTime          @default(now()) @db.Timestamp(0)
  updated_at       DateTime          @default(now()) @updatedAt @db.Timestamp(0)
  invoice_products invoice_products?

  @@index([user_id], map: "product_user_id_foreign")
  @@index([category_id], map: "product_category_id_foreign")
}

model invoice_products {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  invoice_id BigInt   @db.UnsignedBigInt
  invoices   invoices @relation(fields: [invoice_id], references: [id], onDelete: Restrict, onUpdate: Cascade, map: "invoice_products_invoice_id_foreign")
  product_id BigInt  @unique(map: "invoice_product_product_id_unique")  @db.UnsignedBigInt
  products   products @relation(fields: [product_id],references: [id],onDelete: Restrict,onUpdate: Cascade,map: "invoice_product_product_id_foreign")
  user_id BigInt @db.UnsignedBigInt
  users users @relation(fields: [user_id],references: [id],onDelete: Restrict,onUpdate: Cascade,map: "invoice_product_user_id_foreign")
  qty String @db.VarChar(20)
  sales_price String @db.VarChar(20)
  create_at DateTime @default(now()) @db.Timestamp(0)
  update_at DateTime @default(now()) @db.Timestamp(0) @updatedAt
}
